{"version":3,"sources":["services/persons.js","PersonForm.js","Numbers.js","Notification.js","FilterComponent.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","PersonForm","props","useState","newName","setNewName","newNumber","setNewNumber","type","name","onChange","event","console","log","target","value","onClick","preventDefault","onSubmit","phonenumber","Numbers","persons","filter","handleDelete","p","toUpperCase","includes","map","window","confirm","Notification","message","className","text","FilterComponent","filterHandler","App","setPersons","setFilter","setMessage","useEffect","personServices","then","response","data","showNotification","setTimeout","newPerson","sameNamePersonsArray","indexOf","length","samePerson","createdPerson","catch","error","warn","person","newPersons","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d07e6d0.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst remove = (id, newObject) => {\n    return axios.delete(`${baseUrl}/${id}`, newObject)\n  }\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  remove: remove\n}\n","import React, { useState, useEffect } from 'react'\n\nconst PersonForm = (props) => {\n    const [ newName, setNewName ] = useState('')\n    const handler = (event) => {\n      console.log(event.target.value)\n      setNewName(event.target.value)\n    }\n    const [ newNumber, setNewNumber ] = useState('')\n    const numberHandler = (event) => {\n      console.log(event.target.value)\n      setNewNumber(event.target.value)\n    }\n    const onSubmit = (event) => {\n      event.preventDefault()\n      props.onSubmit({name: newName, phonenumber:newNumber})\n      setNewNumber('')\n      setNewName('')\n    }\n    \n    return <form>\n      <div>\n        name: <input type=\"text\" name=\"name\" onChange={handler} value={newName}/>\n        <br></br>\n        phonenumber: <input type=\"text\" name=\"number\" onChange={numberHandler} value={newNumber}/>\n      </div>\n      <div>\n        <button onClick={onSubmit} type=\"submit\">add</button>\n      </div>\n    </form>\n  }\n\n  export default PersonForm\n  ","import React, { useState, useEffect } from 'react'\n\nconst Numbers = ({persons,filter,handleDelete}) => {\n    return <div>\n    <ul>\n    {\n    persons.filter((p)=>{\n      return p.name.toUpperCase().includes(filter.toUpperCase())\n    }).map(p => \n    <li key={p.name}>\n      {p.name} {p.phonenumber}\n      {/* <button onClick={()=>handleDelete(p.id)}>delete</button>  */}\n      <button\n      onClick={() =>\n          window.confirm(\"Are you sure you wish to delete this contact?\") &&\n          handleDelete(p)\n          }\n          >\n      delete\n  </button>\n    </li>)\n  }\n    </ul>\n   \n  </div>\n   }\n\nexport default Numbers","import React, { useState, useEffect } from 'react'\n\nconst Notification= ({ message }) => {\n    if (message === null) {\n  \n      return null\n      \n    }\n  \n    return (\n      <div className={message.type}>\n        {message.text}\n      </div>\n    )\n  }\nexport default Notification","import React, { useState, useEffect } from 'react'\n\nconst FilterComponent = (props) => {\n    return <div>\n          filter: <input type=\"text\" name=\"filter\" \n                    onChange={props.filterHandler} value={props.filter} />\n          </div>\n  }\n\nexport default FilterComponent","import React, { useState, useEffect } from 'react'\nimport personServices from './services/persons.js'\nimport PersonForm from './PersonForm'\nimport Numbers from './Numbers'\nimport Notification from './Notification'\nimport FilterComponent from './FilterComponent'\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([]) \n\n  const [ filter, setFilter ] = useState('')\n\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    console.log('effect')\n    \n    personServices.getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response.data)\n      })\n  }, [])\n\n  useEffect(() => {\n    console.log('effect')\n    // save data on server\n  }, [filter])\n\n  const showNotification = (text, type) => {\n    setMessage({\n      text: text,\n      type: type\n    } \n    )\n    setTimeout(() => {\n      setMessage(null)\n    }, 2000)\n  }\n\n\n  const filterHandler = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n \n  const onAdd = (newPerson) => {\n    const sameNamePersonsArray = persons.filter((p) => {\n      return p.name.toUpperCase().indexOf(newPerson.name.toUpperCase()) != -1\n    })\n\n    if (sameNamePersonsArray.length > 0) {\n      // alert(newPerson.name + ' is already in list ', 'error' )\n      if (window.confirm(newPerson.name  + ' is already added to phonebook, replace the old number with a new one?')) {\n        const samePerson = sameNamePersonsArray[0]\n        personServices.update(samePerson.id, newPerson)\n        .then(response => {\n          setPersons([...persons.filter((p) => {\n            return p.id != samePerson.id\n          }), response.data])\n          showNotification(newPerson.name + ' is updated successfully', 'success')\n          console.log(response)\n        })\n      }\n      return\n    }\n  \n    personServices.create(newPerson)\n      .then(response => {\n        showNotification(newPerson.name + ' is added successfully', 'success')\n        const createdPerson = response.data\n        setPersons([...persons, createdPerson])\n        console.log(response)\n      }).catch(error => {\n        // p채채set k채siksi palvelimen palauttamaan virheilmoitusolioon n채in\n        // showNotification(error.response.data, 'error')\n        if( error.response ) {\n          showNotification(error.response.data.error, 'error')\n          console.warn(error.response.data.error); // => the response payload \n        }\n      })\n  }\n\n const handleDelete = (person) => {\n   personServices.remove(person.id)\n   .then(()=> {\n    showNotification(person.name + ' is deleted successfully', 'success')\n    })\n   .catch(error=>{\n    showNotification('Information of' + person.name + 'has already been removed from server', 'error')\n   })\n   const newPersons = persons.filter(p => p.id !== person.id);\n    setPersons(newPersons);\n    \n }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <FilterComponent filterHandler={filterHandler} filter={filter}/>\n      <h3>Add a new</h3>\n      <PersonForm onSubmit={onAdd}/>\n      <h3>Numbers</h3>\n      <Numbers persons={persons} filter={filter} handleDelete={handleDelete}/> \n    </div>\n  )\n\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)\n"],"sourceRoot":""}